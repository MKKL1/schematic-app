// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (name, value_definitions)
VALUES ($1, $2)
RETURNING name, value_definitions
`

type CreateCategoryParams struct {
	Name             string
	ValueDefinitions []byte
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory, arg.Name, arg.ValueDefinitions)
	var i Category
	err := row.Scan(&i.Name, &i.ValueDefinitions)
	return i, err
}

const createPostCategory = `-- name: CreatePostCategory :exec
INSERT INTO post_category_values (post_id, category, values)
VALUES ($1, $2, $3)
RETURNING post_id, category, values
`

type CreatePostCategoryParams struct {
	PostID   int64
	Category string
	Values   []byte
}

func (q *Queries) CreatePostCategory(ctx context.Context, arg CreatePostCategoryParams) error {
	_, err := q.db.Exec(ctx, createPostCategory, arg.PostID, arg.Category, arg.Values)
	return err
}

const getCategVarsForPost = `-- name: GetCategVarsForPost :many
SELECT category, values FROM post_category_values
WHERE post_id = $1
`

type GetCategVarsForPostRow struct {
	Category string
	Values   []byte
}

func (q *Queries) GetCategVarsForPost(ctx context.Context, postID int64) ([]GetCategVarsForPostRow, error) {
	rows, err := q.db.Query(ctx, getCategVarsForPost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCategVarsForPostRow
	for rows.Next() {
		var i GetCategVarsForPostRow
		if err := rows.Scan(&i.Category, &i.Values); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryByName = `-- name: GetCategoryByName :one
SELECT name, value_definitions FROM categories
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetCategoryByName(ctx context.Context, name string) (Category, error) {
	row := q.db.QueryRow(ctx, getCategoryByName, name)
	var i Category
	err := row.Scan(&i.Name, &i.ValueDefinitions)
	return i, err
}

const getPostCategory = `-- name: GetPostCategory :one
SELECT post_id, category, values FROM post_category_values
WHERE post_id = $1 AND category = $2
`

type GetPostCategoryParams struct {
	PostID   int64
	Category string
}

func (q *Queries) GetPostCategory(ctx context.Context, arg GetPostCategoryParams) (PostCategoryValue, error) {
	row := q.db.QueryRow(ctx, getPostCategory, arg.PostID, arg.Category)
	var i PostCategoryValue
	err := row.Scan(&i.PostID, &i.Category, &i.Values)
	return i, err
}

const getPostsByJSONValue = `-- name: GetPostsByJSONValue :many
SELECT post_id, values
FROM post_category_values
WHERE category = $1
  AND values @? $2::jsonpath
`

type GetPostsByJSONValueParams struct {
	Category string
	Column2  interface{}
}

type GetPostsByJSONValueRow struct {
	PostID int64
	Values []byte
}

func (q *Queries) GetPostsByJSONValue(ctx context.Context, arg GetPostsByJSONValueParams) ([]GetPostsByJSONValueRow, error) {
	rows, err := q.db.Query(ctx, getPostsByJSONValue, arg.Category, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsByJSONValueRow
	for rows.Next() {
		var i GetPostsByJSONValueRow
		if err := rows.Scan(&i.PostID, &i.Values); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
