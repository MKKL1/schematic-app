// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFile = `-- name: CreateFile :one
INSERT INTO tmp_file (file_hash, store_key, file_name, content_type, file_size, expires_at)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT (file_hash) DO UPDATE
    SET expires_at = EXCLUDED.expires_at,
        updated_at = NOW()
RETURNING store_key
`

type CreateFileParams struct {
	FileHash    string
	StoreKey    string
	FileName    string
	ContentType string
	FileSize    int64
	ExpiresAt   pgtype.Timestamptz
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (string, error) {
	row := q.db.QueryRow(ctx, createFile,
		arg.FileHash,
		arg.StoreKey,
		arg.FileName,
		arg.ContentType,
		arg.FileSize,
		arg.ExpiresAt,
	)
	var store_key string
	err := row.Scan(&store_key)
	return store_key, err
}

const deleteExpiredFilesByKey = `-- name: DeleteExpiredFilesByKey :exec
DELETE FROM tmp_file
WHERE store_key = ANY($1::text[])
`

func (q *Queries) DeleteExpiredFilesByKey(ctx context.Context, dollar_1 []string) error {
	_, err := q.db.Exec(ctx, deleteExpiredFilesByKey, dollar_1)
	return err
}

const getFileByHash = `-- name: GetFileByHash :one
SELECT file_hash, store_key, file_name, content_type, file_size, expires_at, created_at, updated_at FROM tmp_file
WHERE file_hash = $1
`

func (q *Queries) GetFileByHash(ctx context.Context, fileHash string) (TmpFile, error) {
	row := q.db.QueryRow(ctx, getFileByHash, fileHash)
	var i TmpFile
	err := row.Scan(
		&i.FileHash,
		&i.StoreKey,
		&i.FileName,
		&i.ContentType,
		&i.FileSize,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFileByKey = `-- name: GetFileByKey :one
SELECT file_hash, store_key, file_name, content_type, file_size, expires_at, created_at, updated_at FROM tmp_file
WHERE store_key = $1
`

func (q *Queries) GetFileByKey(ctx context.Context, storeKey string) (TmpFile, error) {
	row := q.db.QueryRow(ctx, getFileByKey, storeKey)
	var i TmpFile
	err := row.Scan(
		&i.FileHash,
		&i.StoreKey,
		&i.FileName,
		&i.ContentType,
		&i.FileSize,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listExpiredFiles = `-- name: ListExpiredFiles :many
SELECT file_hash, store_key, expires_at
FROM tmp_file
WHERE expires_at < NOW()
`

type ListExpiredFilesRow struct {
	FileHash  string
	StoreKey  string
	ExpiresAt pgtype.Timestamptz
}

func (q *Queries) ListExpiredFiles(ctx context.Context) ([]ListExpiredFilesRow, error) {
	rows, err := q.db.Query(ctx, listExpiredFiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListExpiredFilesRow
	for rows.Next() {
		var i ListExpiredFilesRow
		if err := rows.Scan(&i.FileHash, &i.StoreKey, &i.ExpiresAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
