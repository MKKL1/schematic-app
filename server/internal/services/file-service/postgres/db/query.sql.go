// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFile = `-- name: CreateFile :exec
INSERT INTO file (hash, file_size, content_type)
VALUES ($1, $2, $3)
`

type CreateFileParams struct {
	Hash        string
	FileSize    int32
	ContentType string
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) error {
	_, err := q.db.Exec(ctx, createFile, arg.Hash, arg.FileSize, arg.ContentType)
	return err
}

const createImage = `-- name: CreateImage :exec

INSERT INTO image (file_hash, image_type)
VALUES ($1, $2)
`

type CreateImageParams struct {
	FileHash  string
	ImageType string
}

// --- Image Queries ---
func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) error {
	_, err := q.db.Exec(ctx, createImage, arg.FileHash, arg.ImageType)
	return err
}

const createTempFile = `-- name: CreateTempFile :exec
INSERT INTO tmp_file (store_key, file_name, content_type, expires_at)
VALUES ($1, $2, $3, $4)
`

type CreateTempFileParams struct {
	StoreKey    string
	FileName    string
	ContentType string
	ExpiresAt   pgtype.Timestamptz
}

func (q *Queries) CreateTempFile(ctx context.Context, arg CreateTempFileParams) error {
	_, err := q.db.Exec(ctx, createTempFile,
		arg.StoreKey,
		arg.FileName,
		arg.ContentType,
		arg.ExpiresAt,
	)
	return err
}

const deleteTmpFiles = `-- name: DeleteTmpFiles :exec
DELETE FROM tmp_file
WHERE store_key = ANY($1::text[])
`

func (q *Queries) DeleteTmpFiles(ctx context.Context, dollar_1 []string) error {
	_, err := q.db.Exec(ctx, deleteTmpFiles, dollar_1)
	return err
}

const fileExistsByHash = `-- name: FileExistsByHash :one
SELECT exists(SELECT 1 FROM file
              WHERE hash = $1)
`

func (q *Queries) FileExistsByHash(ctx context.Context, hash string) (bool, error) {
	row := q.db.QueryRow(ctx, fileExistsByHash, hash)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getAndMarkTempFileProcessing = `-- name: GetAndMarkTempFileProcessing :one
UPDATE tmp_file
SET status = 'processing', updated_at = NOW()
WHERE store_key = $1 AND status = 'pending'
RETURNING store_key, file_name, content_type, status, error_reason, processing_attempts, final_hash, expires_at, created_at, updated_at
`

func (q *Queries) GetAndMarkTempFileProcessing(ctx context.Context, storeKey string) (TmpFile, error) {
	row := q.db.QueryRow(ctx, getAndMarkTempFileProcessing, storeKey)
	var i TmpFile
	err := row.Scan(
		&i.StoreKey,
		&i.FileName,
		&i.ContentType,
		&i.Status,
		&i.ErrorReason,
		&i.ProcessingAttempts,
		&i.FinalHash,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getImageTypesForHash = `-- name: GetImageTypesForHash :many
SELECT image_type FROM image WHERE file_hash = $1
`

func (q *Queries) GetImageTypesForHash(ctx context.Context, fileHash string) ([]string, error) {
	rows, err := q.db.Query(ctx, getImageTypesForHash, fileHash)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var image_type string
		if err := rows.Scan(&image_type); err != nil {
			return nil, err
		}
		items = append(items, image_type)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTempFile = `-- name: GetTempFile :one
SELECT store_key, file_name, content_type, status, error_reason, processing_attempts, final_hash, expires_at, created_at, updated_at FROM tmp_file
WHERE store_key = $1
`

func (q *Queries) GetTempFile(ctx context.Context, storeKey string) (TmpFile, error) {
	row := q.db.QueryRow(ctx, getTempFile, storeKey)
	var i TmpFile
	err := row.Scan(
		&i.StoreKey,
		&i.FileName,
		&i.ContentType,
		&i.Status,
		&i.ErrorReason,
		&i.ProcessingAttempts,
		&i.FinalHash,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listExpiredFiles = `-- name: ListExpiredFiles :many
SELECT store_key, expires_at
FROM tmp_file
WHERE expires_at < NOW()
`

type ListExpiredFilesRow struct {
	StoreKey  string
	ExpiresAt pgtype.Timestamptz
}

func (q *Queries) ListExpiredFiles(ctx context.Context) ([]ListExpiredFilesRow, error) {
	rows, err := q.db.Query(ctx, listExpiredFiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListExpiredFilesRow
	for rows.Next() {
		var i ListExpiredFilesRow
		if err := rows.Scan(&i.StoreKey, &i.ExpiresAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markTempFileFailed = `-- name: MarkTempFileFailed :exec
UPDATE tmp_file
SET status = 'failed',
    processing_attempts = processing_attempts + 1,
    updated_at = NOW()
WHERE store_key = $1
`

func (q *Queries) MarkTempFileFailed(ctx context.Context, storeKey string) error {
	_, err := q.db.Exec(ctx, markTempFileFailed, storeKey)
	return err
}

const markTempFileProcessed = `-- name: MarkTempFileProcessed :exec
UPDATE tmp_file
SET status = 'processed',
    final_hash = $2,
    updated_at = NOW()
WHERE store_key = $1
`

type MarkTempFileProcessedParams struct {
	StoreKey  string
	FinalHash *string
}

func (q *Queries) MarkTempFileProcessed(ctx context.Context, arg MarkTempFileProcessedParams) error {
	_, err := q.db.Exec(ctx, markTempFileProcessed, arg.StoreKey, arg.FinalHash)
	return err
}
