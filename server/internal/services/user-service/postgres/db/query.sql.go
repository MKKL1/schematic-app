// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type CreateUserParams struct {
	ID      int64
	Name    string
	OidcSub pgtype.UUID
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, oidc_sub FROM users
WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.OidcSub)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, name, oidc_sub FROM users
WHERE name = $1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByName, name)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.OidcSub)
	return i, err
}

const getUserByOIDCSub = `-- name: GetUserByOIDCSub :one
SELECT id, name, oidc_sub FROM users
WHERE oidc_sub = $1
`

func (q *Queries) GetUserByOIDCSub(ctx context.Context, oidcSub pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByOIDCSub, oidcSub)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.OidcSub)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, name, oidc_sub FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Name, &i.OidcSub); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
