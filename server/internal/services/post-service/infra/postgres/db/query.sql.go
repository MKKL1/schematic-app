// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
)

const createPost = `-- name: CreatePost :exec
WITH ins_post AS (
    INSERT INTO post (id, name, "desc", owner, author_id)
        VALUES ($1, $2, $3, $4, $5)
        RETURNING id
),
     ins_tags AS (
         INSERT INTO post_tags (post_id, tag)
             SELECT ins_post.id, t
             FROM ins_post, unnest($6::text[]) AS t
     ),
     ins_cat AS (
         INSERT INTO post_category_metadata (post_id, category, metadata)
             SELECT ins_post.id, r."Name", r."Metadata"
             FROM ins_post,
                  jsonb_to_recordset($7::jsonb) AS r("Name" text, "Metadata" jsonb)
     )
SELECT id FROM ins_post
`

type CreatePostParams struct {
	ID       int64
	Name     string
	Desc     *string
	Owner    int64
	AuthorID *int64
	Column6  []string
	Column7  []byte
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.Exec(ctx, createPost,
		arg.ID,
		arg.Name,
		arg.Desc,
		arg.Owner,
		arg.AuthorID,
		arg.Column6,
		arg.Column7,
	)
	return err
}

const getCategory = `-- name: GetCategory :one
SELECT name, metadata_schema FROM categories
WHERE name = $1
`

func (q *Queries) GetCategory(ctx context.Context, name string) (Category, error) {
	row := q.db.QueryRow(ctx, getCategory, name)
	var i Category
	err := row.Scan(&i.Name, &i.MetadataSchema)
	return i, err
}

const getPost = `-- name: GetPost :one
SELECT
    p.id,
    p.name,
    p."desc" AS description,
    p.owner,
    p.author_id,
    COALESCE(
            (
                SELECT json_agg(
                               json_build_object(
                                       'name', pcm.category,
                                       'metadata', pcm.metadata
                               )
                       )::text
                FROM post_category_metadata pcm
                WHERE pcm.post_id = p.id
            ),
            '[]'
    ) AS category_vars,
    COALESCE(
            (
                SELECT array_agg(pt.tag)::text[]
                FROM post_tags pt
                WHERE pt.post_id = p.id
            ),
            '{}'::text[]
    ) AS tags
FROM post p
WHERE p.id = $1
`

type GetPostRow struct {
	ID           int64
	Name         string
	Description  *string
	Owner        int64
	AuthorID     *int64
	CategoryVars interface{}
	Tags         interface{}
}

func (q *Queries) GetPost(ctx context.Context, id int64) (GetPostRow, error) {
	row := q.db.QueryRow(ctx, getPost, id)
	var i GetPostRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Owner,
		&i.AuthorID,
		&i.CategoryVars,
		&i.Tags,
	)
	return i, err
}
